---
import DefaultLayout from "../../layouts/DefaultLayout.astro";
---

<DefaultLayout>
  <div class="container">
    <div class="block"></div>
    <div class="block"></div>
    <div class="block"></div>
    <div class="block"></div>
    <div class="block"></div>
    <!-- <div class="block"></div> -->
  </div>
</DefaultLayout>

<style lang="scss">
  .container {
    position: relative;
    width: 70vw;
    height: 300px;
    margin-inline: auto;
    overflow: hidden;
    border: 2px solid gray;
  }

  .block {
    position: absolute;
    width: 300px;
    height: 300px;
    background: cyan;
    border: 1px solid blue;
  }
</style>

<script>
  import { gsap } from "gsap";
  import { Pane } from "tweakpane";

  const container = document.querySelector<HTMLDivElement>(".container");
  const items = document.querySelectorAll<HTMLDivElement>(".block");

  const PARAMS = {
    gap: 0,
    count: 0,
    paused: false,
    hide_overflow: true,
  };

  let itemWidth = items[0].clientWidth;
  let fullWidth = items.length * (itemWidth + PARAMS.gap);
  let screenWidth = container!.clientWidth;

  const pane = new Pane();

  pane.addMonitor(PARAMS, "count");
  pane.addInput(PARAMS, "gap");
  pane.addInput(PARAMS, "paused");
  pane.addInput(PARAMS, "hide_overflow").on("change", e => {
    if (e.value) {
      container!.style.overflow = "hidden";
    } else {
      container!.style.overflow = "visible";
    }
  });

  const resize = () => {
    itemWidth = items[0].clientWidth;
    fullWidth = items.length * (itemWidth + PARAMS.gap);
    screenWidth = container!.clientWidth;
  };

  const wheel = (e: WheelEvent) => {
    e.preventDefault();
    PARAMS.count += e.deltaY * 0.9;
  };

  //
  // Listeners
  //
  window.addEventListener("resize", resize);
  document.addEventListener("wheel", wheel, { passive: false });

  const dispose = (scroll: number) => {
    gsap.set(items, {
      x: i => i * (itemWidth + PARAMS.gap) + scroll,
      modifiers: {
        x: x => {
          const s = (parseFloat(x) % (screenWidth + itemWidth)) - itemWidth;
          return `${s}px`;
        },
      },
    });
  };

  let oldCount = 0;

  const render = () => {
    requestAnimationFrame(render);

    if (PARAMS.paused) {
      return;
    }

    dispose(PARAMS.count);

    const velocityCount = PARAMS.count - oldCount;

    gsap.to(items, {
      skewX: velocityCount * 0.2,
      rotate: velocityCount * 0.01,
      scale: 1 - Math.min(100, Math.abs(velocityCount)) * 0.003,
    });
    oldCount = PARAMS.count;
    PARAMS.count += 2;
  };

  render();
</script>
