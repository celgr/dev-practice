---
import DefaultLayout from "../../layouts/DefaultLayout.astro";
---

<DefaultLayout>
  <div class="container">
    <div class="block">1</div>
    <div class="block">2</div>
    <div class="block">3</div>
    <div class="block">4</div>
    <div class="block">5</div>
  </div>

  <div class="info">
    <h2>Slider with infinite loop</h2>
    <p>
      ref: <a href="https://codepen.io/supah/pen/VwegJwV"
        >https://codepen.io/supah/pen/VwegJwV</a
      >
    </p>
    <img src="/pr4/fig1.png" />
  </div>
</DefaultLayout>

<style lang="scss">
  .container {
    display: flex;
    overflow: hidden;
    width: 100%;
    height: 300px;
    position: relative;
  }

  .block {
    flex-shrink: 0;
    // width: 600px;
    width: 60vw;
    height: 100%;

    background: pink;
    display: flex;
    justify-content: center;
    align-items: center;
    position: absolute;
  }

  .info {
    padding: 40px 20px;

    img {
      max-width: 100%;
      margin: 20px 0;
    }
  }
</style>

<script>
  import { gsap } from "gsap";

  const gap = 50;

  const blocks = document.querySelectorAll(".block")!;

  let blockWidth = blocks[0].clientWidth;
  let fullWidth = blocks.length * (blockWidth + gap);

  let count = 0;
  // let deltaY = 0;

  const dispose = (scroll: number) => {
    gsap.set(blocks, {
      x: i => {
        const s = i * (blockWidth + gap) + scroll;
        return s;
      },
      modifiers: {
        x: x => {
          const s = (parseFloat(x) % fullWidth) - blockWidth;
          return `${s}px`;
        },
      },
    });
  };

  // resize

  const resize = () => {
    blockWidth = blocks[0].clientWidth;
    fullWidth = blocks.length * (blockWidth + gap);
  };

  window.addEventListener("resize", resize);

  // const wheel = (e: WheelEvent) => {
  //   e.preventDefault();
  // };

  // document.addEventListener("wheel", wheel, { passive: false });

  const render = () => {
    requestAnimationFrame(render);

    count += 2;

    dispose(count);

    // gsap.to(blocks, {
    //   skewX: -deltaY * 0.2,
    //   rotate: deltaY * 0.01,
    //   scale: 1 - Math.min(100, Math.abs(deltaY)) * 0.003,
    // });
  };

  render();
</script>
