---
import DefaultLayout from "../../layouts/DefaultLayout.astro";
---

<DefaultLayout>
  <div class="container">
    <div class="block"></div>
    <div class="block"></div>
    <div class="block"></div>
    <!-- <div class="block"></div>
    <div class="block"></div> -->
  </div>
</DefaultLayout>

<style lang="scss">
  .container {
    position: relative;
    width: 70vw;
    height: 300px;
    margin-inline: auto;
    // overflow: hidden;
    border: 2px solid gray;
  }

  .block {
    position: absolute;
    width: 300px;
    height: 300px;
    background: cyan;
    border: 1px solid blue;
  }
</style>

<script>
  import { gsap } from "gsap";

  const container = document.querySelector(".container");
  const items = document.querySelectorAll(".block");

  let itemWidth = items[0].clientWidth;
  let fullWidth = items.length * itemWidth;
  let screenWidth = container!.clientWidth;

  const gap = 100;
  let count = 0;

  const resize = () => {
    itemWidth = items[0].clientWidth;
    fullWidth = items.length * (itemWidth + gap);
    screenWidth = container!.clientWidth;
  };

  const wheel = (e: WheelEvent) => {
    e.preventDefault();
    count += e.deltaY * 0.9;
  };

  //
  // Listeners
  //
  window.addEventListener("resize", resize);
  document.addEventListener("wheel", wheel, { passive: false });

  const dispose = (scroll: number) => {
    gsap.set(items, {
      x: (i) => i * (itemWidth + gap) + scroll,
      modifiers: {
        x: (x) => {
          const s = (parseFloat(x) % (screenWidth + itemWidth)) - itemWidth;
          return `${s}px`;
        },
      },
    });
  };

  let oldCount = 0;

  const render = () => {
    requestAnimationFrame(render);

    dispose(count);

    const velocityCount = count - oldCount;

    gsap.to(items, {
      skewX: velocityCount * 0.2,
      rotate: velocityCount * 0.01,
      scale: 1 - Math.min(100, Math.abs(velocityCount)) * 0.003,
    });
    oldCount = count;
    count += 2;
  };

  render();
</script>
